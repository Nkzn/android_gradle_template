apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply plugin: 'android-apt'

dependencies {

    compile "com.nineoldandroids:library:${nineOldAndroidsVersion}"

    compile "com.android.support:support-v13:${supportPackageVersion}"
    //compile "com.android.support:leanback-v17:${supportPackageVersion}"
    //compile "com.android.support:appcompat-v7:${supportPackageVersion}"
    //compile "com.android.support:recyclerview-v7:${supportPackageVersion}"
    //compile "com.android.support:gridlayout-v7:${supportPackageVersion}"
    //compile "com.android.support:mediarouter-v7:${supportPackageVersion}"
    //compile "com.android.support:palette-v7:${supportPackageVersion}"
    //compile "com.android.support:cardview-v7:${supportPackageVersion}"
    compile "com.android.support:support-annotations:${supportPackageVersion}"

    compile "com.jakewharton:butterknife:${butterKnifeVersion}"
    apt "com.jakewharton:butterknife:${butterKnifeVersion}"

    // Butter Knife ではなく、 Android Annotations を使う場合はこちら
    //compile "org.androidannotations:androidannotations-api:${project.androidAnnotationsVersion}"
    //apt "org.androidannotations:androidannotations:${project.androidAnnotationsVersion}"

    compile "com.squareup.dagger:dagger:${project.daggerVersion}"
    apt "com.squareup.dagger:dagger-compiler:${project.daggerVersion}"

    compile "net.vvakame:jsonpullparser-core:${project.jppVersion}"
    apt "net.vvakame:jsonpullparser-apt:${project.jppVersion}"

    compile "de.greenrobot:eventbus:${eventbusVersion}"
    //noinspection GradleDependency
    compile "com.google.android.gms:play-services:${playServicesVersion}"
    // http://googlemaps.github.io/android-maps-utils/
    compile "com.google.maps.android:android-maps-utils:${androidMapsUtils}"

    compile "org.apache.commons:commons-lang3:${commonsLangVersion}"
    compile "commons-io:commons-io:${commonsIoVersion}"
    //noinspection GradleDependency
    compile "com.google.guava:guava:${guavaVersion}"
    // guava が内部で参照しているので、入れておかないとProGuard がエラーを出す
    // なぜか 1.3.+ だとエラーが出るようになったので 1.3.9 にしておく
    //compile "com.google.code.findbugs:jsr305:1.3.9"

    compile("com.google.api-client:google-api-client-android:${googleApiClientVersion}") {
        exclude module: 'xpp3'
        exclude module: 'httpclient'
        exclude module: 'junit'
        exclude module: 'android'
    }

    // libs/ にある *.jar を一括で追加する
    compile fileTree(dir: 'libs', include: '*.jar')

    debugCompile project(path: ':library', configuration: 'libDebug')
    releaseCompile project(path: ':library', configuration: 'libRelease')

    // android wear 用のアプリを handheld アプリに埋め込む
    wearApp project(':wear')
}

// for Android Annotations
android.applicationVariants.all { variant ->
    variant.javaCompile.options.compilerArgs += [
            '-AandroidManifestFile=' + variant.processResources.manifestFile
    ]
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 21

        // support renderscript を使う場合
        // renderscriptTargetApi 21
        // renderscriptSupportMode true

        versionCode 1
        versionName '0.0.1'

        // ndk を使用する際の設定。
        // local.properties に ndk.dir=/path/to/ndk の記述を行う必要あり
        // ndk 関連のファイルは例えば app/src/main/jni/ の下に置く
        // 使用するクラスで System.loadLibrary("native_library"); するのをわすれずに

        // ndk {
        //     moduleName "native_library"
        //     stl "gnustl_shared"
        //     abiFilters 'all'
        //     //abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64', 'mips', 'mips64'
        //     ldLibs "log"
        // }
    }

    compileOptions {
        encoding = "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        // exclude duplicate files in apache commons
        // pickFirst なら最初に見つけたやつが apk に入る
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    signingConfigs {
        // debug {
        //     storeFile file("debug.keystore")
        // }

        release
    }

    aaptOptions {
        // 最近の PNG processor が生成するファイルがGB端末上でクラッシュを引き起こすとのことなので、2系をサポートするなら以下の設定を使う
        // useAaptPngCruncher = true

        // android wear 用の apk を asset に置く場合に、圧縮を行わないようにするための設定
        // see http://developer.android.com/training/wearables/apps/packaging.html
        noCompress "apk"
    }

    buildTypes {
        release {
            runProguard true
            proguardFile getDefaultProguardFile('proguard-android.txt')
            proguardFile file('proguard-rules.pro')

            // gradle.properties にリリース署名用の設定があれば署名を有効化します。設定のサンプルとして gradle.properties.forReleaseSigning を置いたので参考にしてください。
            if (project.hasProperty('storeFile')) {
                signingConfig signingConfigs.release
            }

            manifestPlaceholders = [maps_v2_apikey: 'リリース用の証明書に対応するAPIキーをここに書く']
        }

        debug {
            manifestPlaceholders = [maps_v2_apikey: 'デバッグ用の証明書に対応するAPIキーをここに書く']
        }
    }
}

if (project.hasProperty('storeFile')) {
    android.signingConfigs.release.storeFile = file(storeFile)
}
if (project.hasProperty('storePassword')) {
    android.signingConfigs.release.storePassword = storePassword
}
if (project.hasProperty('keyAlias')) {
    android.signingConfigs.release.keyAlias = keyAlias
}
if (project.hasProperty('keyPassword')) {
    android.signingConfigs.release.keyPassword = keyPassword
}
