apply plugin: 'android'

configurations {
    apt
}

dependencies {

    // http://stackoverflow.com/questions/16683944/androidannotations-nothing-generated-empty-activity/16802216#16802216
    apt "com.googlecode.androidannotations:androidannotations:${androidAnnotationsVersion}"
    compile "com.googlecode.androidannotations:androidannotations-api:${androidAnnotationsVersion}"

    // http://d.hatena.ne.jp/esmasui/20130607/1370574632
    apt "net.vvakame:jsonpullparser-apt:${jppVersion}"
    compile "net.vvakame:jsonpullparser-core:${jppVersion}"

    apt "com.squareup.dagger:dagger-compiler:${daggerVersion}"
    compile "com.squareup.dagger:dagger:${daggerVersion}"

    compile files('libs/okhttp-1.0.2.jar')
    compile files('libs/volley.jar')
    compile "com.android.support:support-v4:${supportV4Version}"
    compile "com.google.android.gms:play-services:${playServicesVersion}"
    compile "com.actionbarsherlock:actionbarsherlock:${absVersion}"
    compile "commons-lang:commons-lang:${commonsLangVersion}"
    compile "commons-io:commons-io:${commonsIoVersion}"
    compile "com.google.guava:guava:${guavaVersion}"
    // guava が内部で参照しているので、入れておかないとProGuard がエラーを出す
    compile "com.google.code.findbugs:jsr305:1.3.+"
    compile "javax.inject:javax.inject:1"

    compile project(':MyLibrary')
}

android {
    compileSdkVersion 17
    buildToolsVersion "17.0.0"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 17

        versionCode 1
        versionName '0.0.1'
    }

    signingConfigs {
        // debug {
        //     storeFile file("debug.keystore")
        // }

        release
    }


    buildTypes {
        release {
            runProguard true
            proguardFile getDefaultProguardFile('proguard-android.txt')
            proguardFile file('proguard-project.txt')

            // release 用の apk に署名を行う場合は次の行をアンコメントしてください。
            // プロジェクトルートに gradle.properties が存在し、必要なプロパティがセットされていないとビルドエラーになります。
            // 署名用の設定をする gradle.properties のサンプルとして、gradle.properties.forReleaseSigning を置いたので参考にしてください。:
            // signingConfig signingConfigs.release
        }
    }
}

// gradle.properties で定義された値があれば読み込みます。
if (project.hasProperty('storeFile')) {
    android.signingConfigs.release.storeFile = file(storeFile)
}
if (project.hasProperty('storePassword')) {
    android.signingConfigs.release.storePassword = storePassword
}
if (project.hasProperty('keyAlias')) {
    android.signingConfigs.release.keyAlias = keyAlias
}
if (project.hasProperty('keyPassword')) {
    android.signingConfigs.release.keyPassword = keyPassword
}

android.applicationVariants.each { variant ->
    // ↓ def を付けないと プロジェクトの Dynamic Property になってしまい、常に最後の variant 用のディレクトリが使われてしまう。
    // variant にソースフォルダを追加する方法が見当たらないので R.java 用のソースフォルダを生成場所として利用する。
    def aptOutput = file("${project.buildDir}/source/r/${variant.dirName}")

    variant.javaCompile.doFirst {
        println "*** compile doFirst ${variant.name}, aptOutput=${aptOutput}"
        aptOutput.mkdirs()
        // インクリメンタルビルドでエラーになるので古いファイルが存在する場合は消しておく
        aptOutput.eachFileRecurse groovy.io.FileType.FILES, {
            if (it.name.equals('R.java')) {
                return
            }
            it.delete()
        }
        variant.javaCompile.options.compilerArgs += [
                '-processorpath', configurations.apt.getAsPath(),
                '-AandroidManifestFile=' + variant.processResources.manifestFile,
                '-s', aptOutput
        ]
    }
}

// BuildConfig に、VERSION_NAME 定数を追加する
// see https://groups.google.com/d/msg/adt-dev/KJKjUdCtBxg/jMhRwWbIBq8J
android.applicationVariants.each { variant ->
    def versionName = variant.mergedFlavor.versionName + (variant.buildType.versionNameSuffix != null ? variant.buildType.versionNameSuffix : "")
    variant.generateBuildConfig.javaLines += "public static final String VERSION_NAME = \"${versionName}\";".toString()

}
