apply plugin: 'android'
apply plugin: 'android-apt'

dependencies {

    compile "com.nineoldandroids:library:${nineOldAndroidsVersion}"

    compile "com.android.support:appcompat-v7:${supportPackageVersion}"

    // support-v4 は appcompat-v7 の依存に含まれているので明示は不要。appcompat を使わない場合は↓を生かしてsupport-v4 のみにもできる。
    // compile "com.android.support:support-v4:${supportPackageVersion}"

    compile "org.androidannotations:androidannotations-api:${project.androidAnnotationsVersion}"
    apt "org.androidannotations:androidannotations:${project.androidAnnotationsVersion}"

    compile "com.squareup.dagger:dagger:${project.daggerVersion}"
    apt "com.squareup.dagger:dagger-compiler:${project.daggerVersion}"

    compile "net.vvakame:jsonpullparser-core:${project.jppVersion}"
    apt "net.vvakame:jsonpullparser-apt:${project.jppVersion}"

    compile "com.google.android.gms:play-services:${playServicesVersion}"
    compile "commons-lang:commons-lang:${commonsLangVersion}"
    compile "commons-io:commons-io:${commonsIoVersion}"
    compile "com.google.guava:guava:${guavaVersion}"
    // guava が内部で参照しているので、入れておかないとProGuard がエラーを出す
    // なぜか 1.3.+ だとエラーが出るようになったので 1.3.9 にしておく
    //compile "com.google.code.findbugs:jsr305:1.3.9"
    compile "javax.inject:javax.inject:1"

    compile("com.google.api-client:google-api-client-android:${googleApiClientVersion}") {
        exclude module: 'xpp3'
        exclude module: 'httpclient'
        exclude module: 'junit'
        exclude module: 'android'
    }

    // libs/ にある *.jar を一括で追加する
    compile fileTree(dir: 'libs', include: '*.jar')

    compile project(':MyLibrary')
}

// for Android Annotations
android.applicationVariants.all { variant ->
    variant.javaCompile.options.compilerArgs += [
            '-AandroidManifestFile=' + variant.processResources.manifestFile
    ]
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.1"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 19

        versionCode 1
        versionName '0.0.1'
    }

    compileOptions {
        encoding = "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        // exclude duplicate files in apache commons
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    signingConfigs {
        // debug {
        //     storeFile file("debug.keystore")
        // }

        release
    }


    buildTypes {
        release {
            runProguard true
            proguardFile getDefaultProguardFile('proguard-android.txt')
            proguardFile file('proguard-project.txt')

            // gradle.properties にリリース署名用の設定があれば署名を有効化します。設定のサンプルとして gradle.properties.forReleaseSigning を置いたので参考にしてください。
            if (project.hasProperty('storeFile')) {
                signingConfig signingConfigs.release
            }
        }
    }

    task ndkBuild(type:Exec) {
        commandLine 'ndk-build', '-j'
    }

    task ndkClean(type:Exec) {
        commandLine 'ndk-build', 'clean'
    }

    task libsClean(type:Exec) {
        commandLine 'rm', '-rf', 'libs/armeabi', 'libs/armeabi-v7a', 'libs/x86', 'libs/mips'
    }

    if(new File(projectDir, "jni").exists()){
        tasks.withType(Compile) {
            compileTask -> compileTask.dependsOn ndkBuild
        }

        tasks.withType(com.android.build.gradle.tasks.PackageApplication) {
            pkgTask -> pkgTask.jniDir new File(projectDir, 'libs')
        }

        clean.dependsOn 'ndkClean'
        clean.dependsOn 'libsClean'
    }
}

if (project.hasProperty('storeFile')) {
    android.signingConfigs.release.storeFile = file(storeFile)
}
if (project.hasProperty('storePassword')) {
    android.signingConfigs.release.storePassword = storePassword
}
if (project.hasProperty('keyAlias')) {
    android.signingConfigs.release.keyAlias = keyAlias
}
if (project.hasProperty('keyPassword')) {
    android.signingConfigs.release.keyPassword = keyPassword
}
